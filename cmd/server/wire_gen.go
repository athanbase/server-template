// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"server-template/internal/biz"
	"server-template/internal/conf"
	"server-template/internal/data"
	"server-template/internal/server"
	"server-template/internal/service"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(config *conf.Config, logger log.Logger) (*kratos.App, func(), error) {
	confServer := config.Server
	db := config.Db
	dataDB, cleanup, err := data.NewDB(db, logger)
	if err != nil {
		return nil, nil, err
	}
	dataData, cleanup2, err := data.NewData(dataDB, logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	transaction := data.NewTransaction(dataData)
	userRepo := data.NewUserRepo(dataData)
	redis := config.Redis
	universalClient, cleanup3, err := data.NewRedis(redis)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	userBiz := biz.NewUserBiz(transaction, userRepo, universalClient, logger)
	serverService := service.NewServerService(userBiz, logger, config)
	grpcServer := server.NewGRPCServer(confServer, serverService, logger)
	httpServer := server.NewHTTPServer(confServer, serverService, logger)
	app := newApp(logger, grpcServer, httpServer)
	return app, func() {
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}
