// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package queries

import (
	"context"
)

const createUser = `-- name: CreateUser :execlastid
INSERT INTO user (name) VALUES(?)
`

func (q *Queries) CreateUser(ctx context.Context, name string) (int64, error) {
	result, err := q.db.ExecContext(ctx, createUser, name)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const queryUsers = `-- name: QueryUsers :many
SELECT id, name, country, created_at, updated_at FROM user
`

func (q *Queries) QueryUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, queryUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Country,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :execrows
UPDATE user SET country = ? WHERE name = ?
`

type UpdateUserParams struct {
	Country string `json:"country"`
	Name    string `json:"name"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updateUser, arg.Country, arg.Name)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
